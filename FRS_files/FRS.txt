Project Lumen Game Console

General description:

	The game console we developed runs in an interpreted language called 'Lumen'. Also called to life by us, because of several reasons: it adds a nice facet to our assignment, its a new challenge for us and who doesn't want a programming language of his own! Keep in mind we need a preprocessing of the bare 'Lumen' code on a slightly more powerfull machine to generate the required bytecode. This is necessary to keep the memory footprint of interpreter as small as possible.
	The console consists of several inputs and outputs: 
		Inputs:
			- SD card (SPI) for reading the bytecode game code into the system
			- wired console('s) for controlling the gameplay (I2C or SPI?)			
////////--->					(N: capbility for multiplayer? Can this cause performance issues?)
		Outputs:
			- Standard VGA output (through I2C and second controller as graphics card)
			- support for LCD display, support for LED dot display
			- audio (3,5mm jack)

		Specs and conventions:
			- PIC18F452 for graphics
			- PIC18F4620 for interpreter and I/O
			- Ram for running game: 2048 bytes?


Software blocks:
	- VGA driver
	- ram manager
	- LCD driver
	- Graphics control
	- SPI driver (SD card)
	- I2C driver (graphics card)

VGA driver
	description:
		the VGA drivers sole purpose is to convert the data in the vram to correct timed VGA signals
		for this it needs to know the screen size in pixels, to compute te timings
		possibly it could contain hard coded data to fill the unused space of the screen
////////--->					//N: Implement different modes? Stretch vs ConstantRatio
	requires:
		- 
	provides:
		- int* setScreensize(int x, int y) //needed for creation of vram
		- void setContent(*int vram)
		- void writePixel(int max_x, int max_y, bool color) //color means black or white (on or off if you will)
	private properties:
		- int max_x
		- int max_y
		- int* vram

Graphics control
	description:
		The grapics control has several tasks, first is receiving drawdata over I2C, second is compute and fill the vram with content
		It has build in support to draw some basic forms
		The I2C interface triggers an interrupt, in the ISR the vram is updated with the command

	requires:
		- int* setScreensize(int x, int y)
		- void setContent(*int vram)
		- void writePixel(int max_x, int max_y, bool color)

		- int* memAlloc(int numberOfBytes)
////////--->		//N: some help would be realy nice! Do we need to provide our own memAlloc implementation?
	provides:
		- void writeSprite(int name, *data)
		- void drawSprite(int name, int x, int y)
		- void drawCircle(int x, int y, int radius, bool color)
		- void drawRect(int x1, int y1, int x2, int y2, bool color)
		- void fillCircle(int x, int y, int radius, bool color)
		- void fillRect(int x1, int y1, int x2, int y2, bool color)
		- void drawLine(int x1, int y1, int x2, int y2, bool color)
		- void drawPixel(int x, int y, int color)
		- void clearScreen()
	private properties:
		- int max_x
		- int max_y
		- int* vram